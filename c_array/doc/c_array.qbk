[library C Arrays
    [quickbook 1.5]
    [authors [Rogard, Erwann]]
    [copyright 2011 Erwann Rogard]
    [id c_array]
]

[/Support]

[def __ER__												[@mailto:erDOTciDOT2020ATgmailDOTcom ER]]


[/ C++  ]

[def __cpp03__ 											C++03]
[def __cpp0x__ 											C++0x]
[template tpl_cpp03[var] 								[@http://efnetcpp.org/wiki/ISO/IEC_14882 [var]]]
[template tpl_cpp0x[var] 								[@http://www2.research.att.com/~bs/C++0xFAQ.html [var]]]
[def __url_cpp03__ 										[tpl_cpp03 __cpp03__]]
[def __url_cpp0x__ 										[tpl_cpp0x __cpp0x__]]

[/ Platform]

[def __mac_os__ 										OS X 10.6.5]
[def __mac_default_compiler__ 							gcc4.2]
[def __mac_processor__ 									2.4 Ghz Intel Core 2 Duo]
[def __mac_mem__ 										4GB 1067 Mhz DDR3]
[def __fink__ 											Fink]
[template tpl_fink[var] 								[@http://www.finkproject.org/ [var]]]
[def __url_fink__ 										[tpl_fink __fink__]]

[/ Libraries ]

[template tpl_boost[var] 								[@http://www.boost.org [var]]]
[template tpl_boost_array[var] 							[@http://www.boost.org/doc/libs/release/doc/html/array.html [var]]]
[template tpl_lambda[var] 								[@http://www.boost.org/doc/libs/release/doc/html/lambda.html [var]]]
[template tpl_mpl[var] 									[@http://www.boost.org/libs/mpl/index.html [var]]]
[template tpl_multi_array[var] 							[@http://www.boost.org/doc/libs/release/doc/html/multi_array.html [var]]]
[template tpl_range[var] 								[@http://www.boost.org/doc/libs/release/libs/range/index.html [var]]]
[template tpl_stl[var] 									[@http://en.wikipedia.org/wiki/Standard_Template_Library [var]]]
[template tpl_type_traits[var]							[@http://www.boost.org/doc/libs/release/libs/type_traits/ [var]]]

[/Files]

[template tpl_boost_trunk [var]							[@http://svn.boost.org/svn/boost/trunk [var]]]
[template tpl_boost_type [var]							[@http://svn.boost.org/svn/boost/trunk/boost/type.hpp [var]]]
[template tpl_src[var] 									[@../../src/ [var]] ] 



There's plenty of online tutorials about arrays in C. Here's one that I wrote to imprint some of its
subtleties in memory. Our array will store a ['string literal] i.e. a sequence of characters terminated by the null character,
`\0`. C++ supports C-arrays, but library [tpl_boost_array Boost.Array] provides, as an alternative, a wrapper that exposes an STL-interface. 
However, it is the former that is considered here. A few properties provided by [tpl_type_traits Boost.TypeTraits]
will be explored. The source file from which code snippets are taken is [tpl_src here] and can be compiled and run. Look there to 
find the include statements.

[import ../src/main.cpp]
Let's begin by initializing an array:
[implicit]
This is equivalent to the explicit form:
[explicit]
Accessing elements:
[bracket]
Determining its size:
[size]
An array identifier can be used, in this case dereferenced, like a pointer:
[as_ptr]
The relationship between the pointer syntax and the bracket operator is:
[address]
Let's now turn to some properties. To do so, let's create some type aliases:
[typedef]
Relationship to iterators:
[it]
Topmost bracket (apparently a.k.a as ['extent])  removal, if applicable:
[rx]
Add reference:
[ref]
Array to its pointer equivalent:
[decay]
